//----------------------------------------------------------------------------
// Copyright (c) 2015 Shawn Chidester <zd3nik@gmail.com>, All rights reserved
//----------------------------------------------------------------------------

#include "senjo/Output.h"
#include "Bitfoot.h"

using namespace senjo;

namespace bitfoot
{

//----------------------------------------------------------------------------
static const std::string _TRUE = "true";

//----------------------------------------------------------------------------
#ifndef USE_SHIFT
const uint64_t _BITMAP[64] =
{
  0x0000000000000001ULL, 0x0000000000000002ULL, 0x0000000000000004ULL,
  0x0000000000000008ULL, 0x0000000000000010ULL, 0x0000000000000020ULL,
  0x0000000000000040ULL, 0x0000000000000080ULL, 0x0000000000000100ULL,
  0x0000000000000200ULL, 0x0000000000000400ULL, 0x0000000000000800ULL,
  0x0000000000001000ULL, 0x0000000000002000ULL, 0x0000000000004000ULL,
  0x0000000000008000ULL, 0x0000000000010000ULL, 0x0000000000020000ULL,
  0x0000000000040000ULL, 0x0000000000080000ULL, 0x0000000000100000ULL,
  0x0000000000200000ULL, 0x0000000000400000ULL, 0x0000000000800000ULL,
  0x0000000001000000ULL, 0x0000000002000000ULL, 0x0000000004000000ULL,
  0x0000000008000000ULL, 0x0000000010000000ULL, 0x0000000020000000ULL,
  0x0000000040000000ULL, 0x0000000080000000ULL, 0x0000000100000000ULL,
  0x0000000200000000ULL, 0x0000000400000000ULL, 0x0000000800000000ULL,
  0x0000001000000000ULL, 0x0000002000000000ULL, 0x0000004000000000ULL,
  0x0000008000000000ULL, 0x0000010000000000ULL, 0x0000020000000000ULL,
  0x0000040000000000ULL, 0x0000080000000000ULL, 0x0000100000000000ULL,
  0x0000200000000000ULL, 0x0000400000000000ULL, 0x0000800000000000ULL,
  0x0001000000000000ULL, 0x0002000000000000ULL, 0x0004000000000000ULL,
  0x0008000000000000ULL, 0x0010000000000000ULL, 0x0020000000000000ULL,
  0x0040000000000000ULL, 0x0080000000000000ULL, 0x0100000000000000ULL,
  0x0200000000000000ULL, 0x0400000000000000ULL, 0x0800000000000000ULL,
  0x1000000000000000ULL, 0x2000000000000000ULL, 0x4000000000000000ULL,
  0x8000000000000000ULL,
};
#endif

//----------------------------------------------------------------------------
bitfoot::Diff _diff;

//----------------------------------------------------------------------------
const int Bitfoot::_PIECE_SQR[PieceTypeCount - 2][64] =
{
  { // King Midgame
    0,  8,  8, -8, -8, -8,  8,  0,
   -8, -8,-12,-12,-12,-12, -8, -8,
   -8,-12,-16,-16,-16,-16,-12, -8,
  -12,-16,-24,-24,-24,-24,-16,-12,
  -12,-16,-24,-24,-24,-24,-16,-12,
   -8,-12,-16,-16,-16,-16,-12, -8,
   -8, -8,-12,-12,-12,-12, -8, -8,
    0,  8,  8, -8, -8, -8,  8,  0
  },
  { // King Endgame
  -50,-24,-12, -8, -8,-12,-24,-50,
  -24,-12, -8,  0,  0, -8,-12,-24,
  -12, -8,  0,  8,  8,  0, -8,-12,
   -8,  0,  8, 12, 12,  8,  0, -8,
   -8,  0,  8, 12, 12,  8,  0, -8,
  -12, -8,  0,  8,  8,  0, -8,-12,
  -24,-12, -8,  0,  0, -8,-12,-24,
  -50,-24,-12, -8, -8,-12,-24,-50
  },
  { // WhitePawn
    0,  0,  0,  0,  0,  0,  0,  0,
   -8,  0,  0, -8, -8,  0,  0, -8,
   -8,  0,  0,  4,  4,  0,  0, -8,
   -8,  0,  8, 12, 12,  8,  0, -8,
    0, 10, 12, 16, 16, 12, 10,  0,
   12, 24, 24, 24, 24, 24, 24, 12,
   28, 32, 32, 32, 32, 32, 32, 28,
    0,  0,  0,  0,  0,  0,  0,  0
  },
  { // BlackPawn
    0,  0,  0,  0,  0,  0,  0,  0,
   28, 32, 32, 32, 32, 32, 32, 28,
   12, 24, 24, 24, 24, 24, 24, 12,
    0, 10, 12, 16, 16, 12, 10,  0,
   -8,  0,  8, 12, 12,  8,  0, -8,
   -8,  0,  0,  4,  4,  0,  0, -8,
   -8,  0,  0, -8, -8,  0,  0, -8,
    0,  0,  0,  0,  0,  0,  0,  0
  },
  { // WhiteKnight
  -24,-12, -8, -8, -8, -8,-12,-24,
  -12, -8,  0,  0,  0,  0, -8,-12,
   -8,  0,  8,  8,  8,  8,  0, -8,
   -8,  0,  8, 12, 12,  8,  0, -8,
   -8,  0,  8, 12, 12,  8,  0, -8,
   -8,  0,  8,  8,  8,  8,  0, -8,
  -12, -8,  0,  0,  0,  0, -8,-12,
  -24,-12, -8, -8, -8, -8,-12,-24
  },
  { // BlackKnight
  -24,-12, -8, -8, -8, -8,-12,-24,
  -12, -8,  0,  0,  0,  0, -8,-12,
   -8,  0,  8,  8,  8,  8,  0, -8,
   -8,  0,  8, 12, 12,  8,  0, -8,
   -8,  0,  8, 12, 12,  8,  0, -8,
   -8,  0,  8,  8,  8,  8,  0, -8,
  -12, -8,  0,  0,  0,  0, -8,-12,
  -24,-12, -8, -8, -8, -8,-12,-24
  },
  { // WhiteBishop
  -12, -8,  0,  0,  0,  0, -8,-12,
   -8,  8,  0,  0,  0,  0,  8, -8,
    0,  0,  8,  8,  8,  8,  0,  0,
    0,  0,  8, 12, 12,  8,  0,  0,
    0,  0,  8, 12, 12,  8,  0,  0,
    0,  0,  8,  8,  8,  8,  0,  0,
   -8,  8,  0,  0,  0,  0,  8, -8,
  -12, -8,  0,  0,  0,  0, -8,-12
  },
  { // BlackBishop
  -12, -8,  0,  0,  0,  0, -8,-12,
   -8,  8,  0,  0,  0,  0,  8, -8,
    0,  0,  8,  8,  8,  8,  0,  0,
    0,  0,  8, 12, 12,  8,  0,  0,
    0,  0,  8, 12, 12,  8,  0,  0,
    0,  0,  8,  8,  8,  8,  0,  0,
   -8,  8,  0,  0,  0,  0,  8,  0,
  -12, -8,  0,  0,  0,  0, -8,-12
  },
  { // WhiteRook
    0,  0,  8,  8,  8,  8,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,
    0,  0, -4, -4, -4, -4,  0,  0,
    0,  0, -4, -8, -8, -4,  0,  0,
    0,  0, -4, -8, -8, -4,  0,  0,
    0,  0, -4, -4, -4, -4,  0,  0,
    8,  8,  8,  8,  8,  8,  8,  8,
    0,  0,  0,  0,  0,  0,  0,  0
  },
  { // BlackRook
    0,  0,  0,  0,  0,  0,  0,  0,
    8,  8,  8,  8,  8,  8,  8,  8,
    0,  0, -4, -4, -4, -4,  0,  0,
    0,  0, -4, -8, -8, -4,  0,  0,
    0,  0, -4, -8, -8, -4,  0,  0,
    0,  0, -4, -4, -4, -4,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  8,  8,  8,  8,  0,  0
  },
  { // WhiteQueen
  -50,-12, -8, -8, -8, -8,-12,-50,
  -12, -8,  0,  0,  0,  0, -8,-12,
   -8,  0,  4,  4,  4,  4,  0, -8,
    0,  0,  8,  8,  8,  8,  0,  0,
    0,  0, 12, 12, 12, 12,  0,  0,
    0, 12, 16, 16, 16, 16, 12,  0,
    0,  0, 12, 12, 12, 12,  0,  0,
  -50,  0,  0,  0,  0,  0,  0,-50
  },
  { // BlackQueen
  -50,  0,  0,  0,  0,  0,  0,-50,
    0,  0, 12, 12, 12, 12,  0,  0,
    0, 12, 16, 16, 16, 16, 12,  0,
    0,  0, 12, 12, 12, 12,  0,  0,
    0,  0,  8,  8,  8,  8,  0,  0,
   -8,  0,  4,  4,  4,  4,  0, -8,
  -12, -8,  0,  0,  0,  0, -8,-12,
  -50,-12, -8, -8, -8, -8,-12,-50
  }
};

//----------------------------------------------------------------------------
const int Bitfoot::_VALUE_OF[PieceTypeCount] =
{
  0,           0,
  PawnValue,   PawnValue,
  KnightValue, KnightValue,
  BishopValue, BishopValue,
  RookValue,   RookValue,
  QueenValue,  QueenValue,
  Infinity,    Infinity
};

//----------------------------------------------------------------------------
const int Bitfoot::_TOUCH[64] =
{
  (StateMask ^ WhiteLong), StateMask, StateMask, StateMask,
  (StateMask ^ WhiteCastleMask), StateMask, StateMask, (StateMask ^ WhiteShort),
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  StateMask, StateMask, StateMask, StateMask,
  (StateMask ^ BlackLong), StateMask, StateMask, StateMask,
  (StateMask ^ BlackCastleMask), StateMask, StateMask, (StateMask ^ BlackShort)
};

//----------------------------------------------------------------------------
const int Bitfoot::_ATK_WEIGHT[100] =
{
    0,   0,   1,   2,   3,   5,   7,   9,  12,  15,
   18,  22,  26,  30,  35,  39,  44,  50,  56,  62,
   68,  75,  82,  85,  89,  97, 105, 113, 122, 131,
  140, 150, 169, 180, 191, 202, 213, 225, 237, 248,
  260, 272, 283, 295, 307, 319, 330, 342, 354, 366,
  377, 389, 401, 412, 424, 436, 448, 459, 471, 483,
  494, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_ALL       = 0xFFFFFFFFFFFFFFFFULL;
const uint64_t Bitfoot::_CENTER4   = 0x0000001818000000ULL;
const uint64_t Bitfoot::_CENTER16  = 0x00003C3C3C3C0000ULL;
const uint64_t Bitfoot::_CORNER12  = 0xC3810000000081C3ULL;
const uint64_t Bitfoot::_DARK      = 0x55AA55AA55AA55AAULL;
const uint64_t Bitfoot::_LIGHT     = 0xAA55AA55AA55AA55ULL;
const uint64_t Bitfoot::_MIDDLE    = 0x007E7E7E7E7E7E00ULL;

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_OUTPOST[2] =
{
  0x00007E7E00000000ULL,
  0x000000007E7E0000ULL
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_FILE[8] =
{
  0x0101010101010101ULL,
  0x0202020202020202ULL,
  0x0404040404040404ULL,
  0x0808080808080808ULL,
  0x1010101010101010ULL,
  0x2020202020202020ULL,
  0x4040404040404040ULL,
  0x8080808080808080ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_RANK[8] =
{
  0x00000000000000FFULL,
  0x000000000000FF00ULL,
  0x0000000000FF0000ULL,
  0x00000000FF000000ULL,
  0x000000FF00000000ULL,
  0x0000FF0000000000ULL,
  0x00FF000000000000ULL,
  0xFF00000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_EAST[64] =
{
  0x00000000000000FEULL, 0x00000000000000FCULL, 0x00000000000000F8ULL,
  0x00000000000000F0ULL, 0x00000000000000E0ULL, 0x00000000000000C0ULL,
  0x0000000000000080ULL, 0x0000000000000000ULL, 0x000000000000FE00ULL,
  0x000000000000FC00ULL, 0x000000000000F800ULL, 0x000000000000F000ULL,
  0x000000000000E000ULL, 0x000000000000C000ULL, 0x0000000000008000ULL,
  0x0000000000000000ULL, 0x0000000000FE0000ULL, 0x0000000000FC0000ULL,
  0x0000000000F80000ULL, 0x0000000000F00000ULL, 0x0000000000E00000ULL,
  0x0000000000C00000ULL, 0x0000000000800000ULL, 0x0000000000000000ULL,
  0x00000000FE000000ULL, 0x00000000FC000000ULL, 0x00000000F8000000ULL,
  0x00000000F0000000ULL, 0x00000000E0000000ULL, 0x00000000C0000000ULL,
  0x0000000080000000ULL, 0x0000000000000000ULL, 0x000000FE00000000ULL,
  0x000000FC00000000ULL, 0x000000F800000000ULL, 0x000000F000000000ULL,
  0x000000E000000000ULL, 0x000000C000000000ULL, 0x0000008000000000ULL,
  0x0000000000000000ULL, 0x0000FE0000000000ULL, 0x0000FC0000000000ULL,
  0x0000F80000000000ULL, 0x0000F00000000000ULL, 0x0000E00000000000ULL,
  0x0000C00000000000ULL, 0x0000800000000000ULL, 0x0000000000000000ULL,
  0x00FE000000000000ULL, 0x00FC000000000000ULL, 0x00F8000000000000ULL,
  0x00F0000000000000ULL, 0x00E0000000000000ULL, 0x00C0000000000000ULL,
  0x0080000000000000ULL, 0x0000000000000000ULL, 0xFE00000000000000ULL,
  0xFC00000000000000ULL, 0xF800000000000000ULL, 0xF000000000000000ULL,
  0xE000000000000000ULL, 0xC000000000000000ULL, 0x8000000000000000ULL,
  0x0000000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_NORTH[64] =
{
  0x0101010101010100ULL, 0x0202020202020200ULL, 0x0404040404040400ULL,
  0x0808080808080800ULL, 0x1010101010101000ULL, 0x2020202020202000ULL,
  0x4040404040404000ULL, 0x8080808080808000ULL, 0x0101010101010000ULL,
  0x0202020202020000ULL, 0x0404040404040000ULL, 0x0808080808080000ULL,
  0x1010101010100000ULL, 0x2020202020200000ULL, 0x4040404040400000ULL,
  0x8080808080800000ULL, 0x0101010101000000ULL, 0x0202020202000000ULL,
  0x0404040404000000ULL, 0x0808080808000000ULL, 0x1010101010000000ULL,
  0x2020202020000000ULL, 0x4040404040000000ULL, 0x8080808080000000ULL,
  0x0101010100000000ULL, 0x0202020200000000ULL, 0x0404040400000000ULL,
  0x0808080800000000ULL, 0x1010101000000000ULL, 0x2020202000000000ULL,
  0x4040404000000000ULL, 0x8080808000000000ULL, 0x0101010000000000ULL,
  0x0202020000000000ULL, 0x0404040000000000ULL, 0x0808080000000000ULL,
  0x1010100000000000ULL, 0x2020200000000000ULL, 0x4040400000000000ULL,
  0x8080800000000000ULL, 0x0101000000000000ULL, 0x0202000000000000ULL,
  0x0404000000000000ULL, 0x0808000000000000ULL, 0x1010000000000000ULL,
  0x2020000000000000ULL, 0x4040000000000000ULL, 0x8080000000000000ULL,
  0x0100000000000000ULL, 0x0200000000000000ULL, 0x0400000000000000ULL,
  0x0800000000000000ULL, 0x1000000000000000ULL, 0x2000000000000000ULL,
  0x4000000000000000ULL, 0x8000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_SOUTH[64] =
{
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL,
  0x0000000000000002ULL, 0x0000000000000004ULL, 0x0000000000000008ULL,
  0x0000000000000010ULL, 0x0000000000000020ULL, 0x0000000000000040ULL,
  0x0000000000000080ULL, 0x0000000000000101ULL, 0x0000000000000202ULL,
  0x0000000000000404ULL, 0x0000000000000808ULL, 0x0000000000001010ULL,
  0x0000000000002020ULL, 0x0000000000004040ULL, 0x0000000000008080ULL,
  0x0000000000010101ULL, 0x0000000000020202ULL, 0x0000000000040404ULL,
  0x0000000000080808ULL, 0x0000000000101010ULL, 0x0000000000202020ULL,
  0x0000000000404040ULL, 0x0000000000808080ULL, 0x0000000001010101ULL,
  0x0000000002020202ULL, 0x0000000004040404ULL, 0x0000000008080808ULL,
  0x0000000010101010ULL, 0x0000000020202020ULL, 0x0000000040404040ULL,
  0x0000000080808080ULL, 0x0000000101010101ULL, 0x0000000202020202ULL,
  0x0000000404040404ULL, 0x0000000808080808ULL, 0x0000001010101010ULL,
  0x0000002020202020ULL, 0x0000004040404040ULL, 0x0000008080808080ULL,
  0x0000010101010101ULL, 0x0000020202020202ULL, 0x0000040404040404ULL,
  0x0000080808080808ULL, 0x0000101010101010ULL, 0x0000202020202020ULL,
  0x0000404040404040ULL, 0x0000808080808080ULL, 0x0001010101010101ULL,
  0x0002020202020202ULL, 0x0004040404040404ULL, 0x0008080808080808ULL,
  0x0010101010101010ULL, 0x0020202020202020ULL, 0x0040404040404040ULL,
  0x0080808080808080ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_WEST[64] =
{
  0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000003ULL,
  0x0000000000000007ULL, 0x000000000000000FULL, 0x000000000000001FULL,
  0x000000000000003FULL, 0x000000000000007FULL, 0x0000000000000000ULL,
  0x0000000000000100ULL, 0x0000000000000300ULL, 0x0000000000000700ULL,
  0x0000000000000F00ULL, 0x0000000000001F00ULL, 0x0000000000003F00ULL,
  0x0000000000007F00ULL, 0x0000000000000000ULL, 0x0000000000010000ULL,
  0x0000000000030000ULL, 0x0000000000070000ULL, 0x00000000000F0000ULL,
  0x00000000001F0000ULL, 0x00000000003F0000ULL, 0x00000000007F0000ULL,
  0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000003000000ULL,
  0x0000000007000000ULL, 0x000000000F000000ULL, 0x000000001F000000ULL,
  0x000000003F000000ULL, 0x000000007F000000ULL, 0x0000000000000000ULL,
  0x0000000100000000ULL, 0x0000000300000000ULL, 0x0000000700000000ULL,
  0x0000000F00000000ULL, 0x0000001F00000000ULL, 0x0000003F00000000ULL,
  0x0000007F00000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL,
  0x0000030000000000ULL, 0x0000070000000000ULL, 0x00000F0000000000ULL,
  0x00001F0000000000ULL, 0x00003F0000000000ULL, 0x00007F0000000000ULL,
  0x0000000000000000ULL, 0x0001000000000000ULL, 0x0003000000000000ULL,
  0x0007000000000000ULL, 0x000F000000000000ULL, 0x001F000000000000ULL,
  0x003F000000000000ULL, 0x007F000000000000ULL, 0x0000000000000000ULL,
  0x0100000000000000ULL, 0x0300000000000000ULL, 0x0700000000000000ULL,
  0x0F00000000000000ULL, 0x1F00000000000000ULL, 0x3F00000000000000ULL,
  0x7F00000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_PAWN_ATK[2][64] =
{
  { 0x0000000000000200ULL, 0x0000000000000500ULL, 0x0000000000000A00ULL,
    0x0000000000001400ULL, 0x0000000000002800ULL, 0x0000000000005000ULL,
    0x000000000000A000ULL, 0x0000000000004000ULL, 0x0000000000020000ULL,
    0x0000000000050000ULL, 0x00000000000A0000ULL, 0x0000000000140000ULL,
    0x0000000000280000ULL, 0x0000000000500000ULL, 0x0000000000A00000ULL,
    0x0000000000400000ULL, 0x0000000002000000ULL, 0x0000000005000000ULL,
    0x000000000A000000ULL, 0x0000000014000000ULL, 0x0000000028000000ULL,
    0x0000000050000000ULL, 0x00000000A0000000ULL, 0x0000000040000000ULL,
    0x0000000200000000ULL, 0x0000000500000000ULL, 0x0000000A00000000ULL,
    0x0000001400000000ULL, 0x0000002800000000ULL, 0x0000005000000000ULL,
    0x000000A000000000ULL, 0x0000004000000000ULL, 0x0000020000000000ULL,
    0x0000050000000000ULL, 0x00000A0000000000ULL, 0x0000140000000000ULL,
    0x0000280000000000ULL, 0x0000500000000000ULL, 0x0000A00000000000ULL,
    0x0000400000000000ULL, 0x0002000000000000ULL, 0x0005000000000000ULL,
    0x000A000000000000ULL, 0x0014000000000000ULL, 0x0028000000000000ULL,
    0x0050000000000000ULL, 0x00A0000000000000ULL, 0x0040000000000000ULL,
    0x0200000000000000ULL, 0x0500000000000000ULL, 0x0A00000000000000ULL,
    0x1400000000000000ULL, 0x2800000000000000ULL, 0x5000000000000000ULL,
    0xA000000000000000ULL, 0x4000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL },
  { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000002ULL,
    0x0000000000000005ULL, 0x000000000000000AULL, 0x0000000000000014ULL,
    0x0000000000000028ULL, 0x0000000000000050ULL, 0x00000000000000A0ULL,
    0x0000000000000040ULL, 0x0000000000000200ULL, 0x0000000000000500ULL,
    0x0000000000000A00ULL, 0x0000000000001400ULL, 0x0000000000002800ULL,
    0x0000000000005000ULL, 0x000000000000A000ULL, 0x0000000000004000ULL,
    0x0000000000020000ULL, 0x0000000000050000ULL, 0x00000000000A0000ULL,
    0x0000000000140000ULL, 0x0000000000280000ULL, 0x0000000000500000ULL,
    0x0000000000A00000ULL, 0x0000000000400000ULL, 0x0000000002000000ULL,
    0x0000000005000000ULL, 0x000000000A000000ULL, 0x0000000014000000ULL,
    0x0000000028000000ULL, 0x0000000050000000ULL, 0x00000000A0000000ULL,
    0x0000000040000000ULL, 0x0000000200000000ULL, 0x0000000500000000ULL,
    0x0000000A00000000ULL, 0x0000001400000000ULL, 0x0000002800000000ULL,
    0x0000005000000000ULL, 0x000000A000000000ULL, 0x0000004000000000ULL,
    0x0000020000000000ULL, 0x0000050000000000ULL, 0x00000A0000000000ULL,
    0x0000140000000000ULL, 0x0000280000000000ULL, 0x0000500000000000ULL,
    0x0000A00000000000ULL, 0x0000400000000000ULL, 0x0002000000000000ULL,
    0x0005000000000000ULL, 0x000A000000000000ULL, 0x0014000000000000ULL,
    0x0028000000000000ULL, 0x0050000000000000ULL, 0x00A0000000000000ULL,
    0x0040000000000000ULL}
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_ADJACENT[64] =
{
  0x0000000000000002ULL, 0x0000000000000005ULL, 0x000000000000000AULL,
  0x0000000000000014ULL, 0x0000000000000028ULL, 0x0000000000000050ULL,
  0x00000000000000A0ULL, 0x0000000000000040ULL, 0x0000000000000200ULL,
  0x0000000000000500ULL, 0x0000000000000A00ULL, 0x0000000000001400ULL,
  0x0000000000002800ULL, 0x0000000000005000ULL, 0x000000000000A000ULL,
  0x0000000000004000ULL, 0x0000000000020000ULL, 0x0000000000050000ULL,
  0x00000000000A0000ULL, 0x0000000000140000ULL, 0x0000000000280000ULL,
  0x0000000000500000ULL, 0x0000000000A00000ULL, 0x0000000000400000ULL,
  0x0000000002000000ULL, 0x0000000005000000ULL, 0x000000000A000000ULL,
  0x0000000014000000ULL, 0x0000000028000000ULL, 0x0000000050000000ULL,
  0x00000000A0000000ULL, 0x0000000040000000ULL, 0x0000000200000000ULL,
  0x0000000500000000ULL, 0x0000000A00000000ULL, 0x0000001400000000ULL,
  0x0000002800000000ULL, 0x0000005000000000ULL, 0x000000A000000000ULL,
  0x0000004000000000ULL, 0x0000020000000000ULL, 0x0000050000000000ULL,
  0x00000A0000000000ULL, 0x0000140000000000ULL, 0x0000280000000000ULL,
  0x0000500000000000ULL, 0x0000A00000000000ULL, 0x0000400000000000ULL,
  0x0002000000000000ULL, 0x0005000000000000ULL, 0x000A000000000000ULL,
  0x0014000000000000ULL, 0x0028000000000000ULL, 0x0050000000000000ULL,
  0x00A0000000000000ULL, 0x0040000000000000ULL, 0x0200000000000000ULL,
  0x0500000000000000ULL, 0x0A00000000000000ULL, 0x1400000000000000ULL,
  0x2800000000000000ULL, 0x5000000000000000ULL, 0xA000000000000000ULL,
  0x4000000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_KING_ATK[64] =
{
  0x0000000000000302ULL, 0x0000000000000705ULL, 0x0000000000000E0AULL,
  0x0000000000001C14ULL, 0x0000000000003828ULL, 0x0000000000007050ULL,
  0x000000000000E0A0ULL, 0x000000000000C040ULL, 0x0000000000030203ULL,
  0x0000000000070507ULL, 0x00000000000E0A0EULL, 0x00000000001C141CULL,
  0x0000000000382838ULL, 0x0000000000705070ULL, 0x0000000000E0A0E0ULL,
  0x0000000000C040C0ULL, 0x0000000003020300ULL, 0x0000000007050700ULL,
  0x000000000E0A0E00ULL, 0x000000001C141C00ULL, 0x0000000038283800ULL,
  0x0000000070507000ULL, 0x00000000E0A0E000ULL, 0x00000000C040C000ULL,
  0x0000000302030000ULL, 0x0000000705070000ULL, 0x0000000E0A0E0000ULL,
  0x0000001C141C0000ULL, 0x0000003828380000ULL, 0x0000007050700000ULL,
  0x000000E0A0E00000ULL, 0x000000C040C00000ULL, 0x0000030203000000ULL,
  0x0000070507000000ULL, 0x00000E0A0E000000ULL, 0x00001C141C000000ULL,
  0x0000382838000000ULL, 0x0000705070000000ULL, 0x0000E0A0E0000000ULL,
  0x0000C040C0000000ULL, 0x0003020300000000ULL, 0x0007050700000000ULL,
  0x000E0A0E00000000ULL, 0x001C141C00000000ULL, 0x0038283800000000ULL,
  0x0070507000000000ULL, 0x00E0A0E000000000ULL, 0x00C040C000000000ULL,
  0x0302030000000000ULL, 0x0705070000000000ULL, 0x0E0A0E0000000000ULL,
  0x1C141C0000000000ULL, 0x3828380000000000ULL, 0x7050700000000000ULL,
  0xE0A0E00000000000ULL, 0xC040C00000000000ULL, 0x0203000000000000ULL,
  0x0507000000000000ULL, 0x0A0E000000000000ULL, 0x141C000000000000ULL,
  0x2838000000000000ULL, 0x5070000000000000ULL, 0xA0E0000000000000ULL,
  0x40C0000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_KING_ZONE[64] =
{
  0x0000000000070707ULL, 0x0000000000070707ULL, 0x00000000000E0E0EULL,
  0x00000000001C1C1CULL, 0x0000000000383838ULL, 0x0000000000707070ULL,
  0x0000000000E0E0E0ULL, 0x0000000000E0E0E0ULL, 0x0000000007070707ULL,
  0x0000000007070707ULL, 0x000000000E0E0E0EULL, 0x000000001C1C1C1CULL,
  0x0000000038383838ULL, 0x0000000070707070ULL, 0x00000000E0E0E0E0ULL,
  0x00000000E0E0E0E0ULL, 0x0000000707070707ULL, 0x0000000707070707ULL,
  0x0000000E0E0E0E0EULL, 0x0000001C1C1C1C1CULL, 0x0000003838383838ULL,
  0x0000007070707070ULL, 0x000000E0E0E0E0E0ULL, 0x000000E0E0E0E0E0ULL,
  0x0000070707070700ULL, 0x0000070707070700ULL, 0x00000E0E0E0E0E00ULL,
  0x00001C1C1C1C1C00ULL, 0x0000383838383800ULL, 0x0000707070707000ULL,
  0x0000E0E0E0E0E000ULL, 0x0000E0E0E0E0E000ULL, 0x0007070707070000ULL,
  0x0007070707070000ULL, 0x000E0E0E0E0E0000ULL, 0x001C1C1C1C1C0000ULL,
  0x0038383838380000ULL, 0x0070707070700000ULL, 0x00E0E0E0E0E00000ULL,
  0x00E0E0E0E0E00000ULL, 0x0707070707000000ULL, 0x0707070707000000ULL,
  0x0E0E0E0E0E000000ULL, 0x1C1C1C1C1C000000ULL, 0x3838383838000000ULL,
  0x7070707070000000ULL, 0xE0E0E0E0E0000000ULL, 0xE0E0E0E0E0000000ULL,
  0x0707070700000000ULL, 0x0707070700000000ULL, 0x0E0E0E0E00000000ULL,
  0x1C1C1C1C00000000ULL, 0x3838383800000000ULL, 0x7070707000000000ULL,
  0xE0E0E0E000000000ULL, 0xE0E0E0E000000000ULL, 0x0707070000000000ULL,
  0x0707070000000000ULL, 0x0E0E0E0000000000ULL, 0x1C1C1C0000000000ULL,
  0x3838380000000000ULL, 0x7070700000000000ULL, 0xE0E0E00000000000ULL,
  0xE0E0E00000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_KNIGHT_ATK[64] =
{
  0x0000000000020400ULL, 0x0000000000050800ULL, 0x00000000000A1100ULL,
  0x0000000000142200ULL, 0x0000000000284400ULL, 0x0000000000508800ULL,
  0x0000000000A01000ULL, 0x0000000000402000ULL, 0x0000000002040004ULL,
  0x0000000005080008ULL, 0x000000000A110011ULL, 0x0000000014220022ULL,
  0x0000000028440044ULL, 0x0000000050880088ULL, 0x00000000A0100010ULL,
  0x0000000040200020ULL, 0x0000000204000402ULL, 0x0000000508000805ULL,
  0x0000000A1100110AULL, 0x0000001422002214ULL, 0x0000002844004428ULL,
  0x0000005088008850ULL, 0x000000A0100010A0ULL, 0x0000004020002040ULL,
  0x0000020400040200ULL, 0x0000050800080500ULL, 0x00000A1100110A00ULL,
  0x0000142200221400ULL, 0x0000284400442800ULL, 0x0000508800885000ULL,
  0x0000A0100010A000ULL, 0x0000402000204000ULL, 0x0002040004020000ULL,
  0x0005080008050000ULL, 0x000A1100110A0000ULL, 0x0014220022140000ULL,
  0x0028440044280000ULL, 0x0050880088500000ULL, 0x00A0100010A00000ULL,
  0x0040200020400000ULL, 0x0204000402000000ULL, 0x0508000805000000ULL,
  0x0A1100110A000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL,
  0x5088008850000000ULL, 0xA0100010A0000000ULL, 0x4020002040000000ULL,
  0x0400040200000000ULL, 0x0800080500000000ULL, 0x1100110A00000000ULL,
  0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL,
  0x100010A000000000ULL, 0x2000204000000000ULL, 0x0004020000000000ULL,
  0x0008050000000000ULL, 0x00110A0000000000ULL, 0x0022140000000000ULL,
  0x0044280000000000ULL, 0x0088500000000000ULL, 0x0010A00000000000ULL,
  0x0020400000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_NORTH_EAST[64] =
{
  0x8040201008040200ULL, 0x0080402010080400ULL, 0x0000804020100800ULL,
  0x0000008040201000ULL, 0x0000000080402000ULL, 0x0000000000804000ULL,
  0x0000000000008000ULL, 0x0000000000000000ULL, 0x4020100804020000ULL,
  0x8040201008040000ULL, 0x0080402010080000ULL, 0x0000804020100000ULL,
  0x0000008040200000ULL, 0x0000000080400000ULL, 0x0000000000800000ULL,
  0x0000000000000000ULL, 0x2010080402000000ULL, 0x4020100804000000ULL,
  0x8040201008000000ULL, 0x0080402010000000ULL, 0x0000804020000000ULL,
  0x0000008040000000ULL, 0x0000000080000000ULL, 0x0000000000000000ULL,
  0x1008040200000000ULL, 0x2010080400000000ULL, 0x4020100800000000ULL,
  0x8040201000000000ULL, 0x0080402000000000ULL, 0x0000804000000000ULL,
  0x0000008000000000ULL, 0x0000000000000000ULL, 0x0804020000000000ULL,
  0x1008040000000000ULL, 0x2010080000000000ULL, 0x4020100000000000ULL,
  0x8040200000000000ULL, 0x0080400000000000ULL, 0x0000800000000000ULL,
  0x0000000000000000ULL, 0x0402000000000000ULL, 0x0804000000000000ULL,
  0x1008000000000000ULL, 0x2010000000000000ULL, 0x4020000000000000ULL,
  0x8040000000000000ULL, 0x0080000000000000ULL, 0x0000000000000000ULL,
  0x0200000000000000ULL, 0x0400000000000000ULL, 0x0800000000000000ULL,
  0x1000000000000000ULL, 0x2000000000000000ULL, 0x4000000000000000ULL,
  0x8000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_NORTH_WEST[64] =
{
  0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000010200ULL,
  0x0000000001020400ULL, 0x0000000102040800ULL, 0x0000010204081000ULL,
  0x0001020408102000ULL, 0x0102040810204000ULL, 0x0000000000000000ULL,
  0x0000000000010000ULL, 0x0000000001020000ULL, 0x0000000102040000ULL,
  0x0000010204080000ULL, 0x0001020408100000ULL, 0x0102040810200000ULL,
  0x0204081020400000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL,
  0x0000000102000000ULL, 0x0000010204000000ULL, 0x0001020408000000ULL,
  0x0102040810000000ULL, 0x0204081020000000ULL, 0x0408102040000000ULL,
  0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000010200000000ULL,
  0x0001020400000000ULL, 0x0102040800000000ULL, 0x0204081000000000ULL,
  0x0408102000000000ULL, 0x0810204000000000ULL, 0x0000000000000000ULL,
  0x0000010000000000ULL, 0x0001020000000000ULL, 0x0102040000000000ULL,
  0x0204080000000000ULL, 0x0408100000000000ULL, 0x0810200000000000ULL,
  0x1020400000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL,
  0x0102000000000000ULL, 0x0204000000000000ULL, 0x0408000000000000ULL,
  0x0810000000000000ULL, 0x1020000000000000ULL, 0x2040000000000000ULL,
  0x0000000000000000ULL, 0x0100000000000000ULL, 0x0200000000000000ULL,
  0x0400000000000000ULL, 0x0800000000000000ULL, 0x1000000000000000ULL,
  0x2000000000000000ULL, 0x4000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_SOUTH_EAST[64] =
{
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000002ULL,
  0x0000000000000004ULL, 0x0000000000000008ULL, 0x0000000000000010ULL,
  0x0000000000000020ULL, 0x0000000000000040ULL, 0x0000000000000080ULL,
  0x0000000000000000ULL, 0x0000000000000204ULL, 0x0000000000000408ULL,
  0x0000000000000810ULL, 0x0000000000001020ULL, 0x0000000000002040ULL,
  0x0000000000004080ULL, 0x0000000000008000ULL, 0x0000000000000000ULL,
  0x0000000000020408ULL, 0x0000000000040810ULL, 0x0000000000081020ULL,
  0x0000000000102040ULL, 0x0000000000204080ULL, 0x0000000000408000ULL,
  0x0000000000800000ULL, 0x0000000000000000ULL, 0x0000000002040810ULL,
  0x0000000004081020ULL, 0x0000000008102040ULL, 0x0000000010204080ULL,
  0x0000000020408000ULL, 0x0000000040800000ULL, 0x0000000080000000ULL,
  0x0000000000000000ULL, 0x0000000204081020ULL, 0x0000000408102040ULL,
  0x0000000810204080ULL, 0x0000001020408000ULL, 0x0000002040800000ULL,
  0x0000004080000000ULL, 0x0000008000000000ULL, 0x0000000000000000ULL,
  0x0000020408102040ULL, 0x0000040810204080ULL, 0x0000081020408000ULL,
  0x0000102040800000ULL, 0x0000204080000000ULL, 0x0000408000000000ULL,
  0x0000800000000000ULL, 0x0000000000000000ULL, 0x0002040810204080ULL,
  0x0004081020408000ULL, 0x0008102040800000ULL, 0x0010204080000000ULL,
  0x0020408000000000ULL, 0x0040800000000000ULL, 0x0080000000000000ULL,
  0x0000000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_SOUTH_WEST[64] =
{
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000001ULL, 0x0000000000000002ULL, 0x0000000000000004ULL,
  0x0000000000000008ULL, 0x0000000000000010ULL, 0x0000000000000020ULL,
  0x0000000000000040ULL, 0x0000000000000000ULL, 0x0000000000000100ULL,
  0x0000000000000201ULL, 0x0000000000000402ULL, 0x0000000000000804ULL,
  0x0000000000001008ULL, 0x0000000000002010ULL, 0x0000000000004020ULL,
  0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000020100ULL,
  0x0000000000040201ULL, 0x0000000000080402ULL, 0x0000000000100804ULL,
  0x0000000000201008ULL, 0x0000000000402010ULL, 0x0000000000000000ULL,
  0x0000000001000000ULL, 0x0000000002010000ULL, 0x0000000004020100ULL,
  0x0000000008040201ULL, 0x0000000010080402ULL, 0x0000000020100804ULL,
  0x0000000040201008ULL, 0x0000000000000000ULL, 0x0000000100000000ULL,
  0x0000000201000000ULL, 0x0000000402010000ULL, 0x0000000804020100ULL,
  0x0000001008040201ULL, 0x0000002010080402ULL, 0x0000004020100804ULL,
  0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000020100000000ULL,
  0x0000040201000000ULL, 0x0000080402010000ULL, 0x0000100804020100ULL,
  0x0000201008040201ULL, 0x0000402010080402ULL, 0x0000000000000000ULL,
  0x0001000000000000ULL, 0x0002010000000000ULL, 0x0004020100000000ULL,
  0x0008040201000000ULL, 0x0010080402010000ULL, 0x0020100804020100ULL,
  0x0040201008040201ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_WIDE_NORTH[64] =
{
  0x0303030303030300ULL, 0x0707070707070700ULL, 0x0E0E0E0E0E0E0E00ULL,
  0x1C1C1C1C1C1C1C00ULL, 0x3838383838383800ULL, 0x7070707070707000ULL,
  0xE0E0E0E0E0E0E000ULL, 0xC0C0C0C0C0C0C000ULL, 0x0303030303030000ULL,
  0x0707070707070000ULL, 0x0E0E0E0E0E0E0000ULL, 0x1C1C1C1C1C1C0000ULL,
  0x3838383838380000ULL, 0x7070707070700000ULL, 0xE0E0E0E0E0E00000ULL,
  0xC0C0C0C0C0C00000ULL, 0x0303030303000000ULL, 0x0707070707000000ULL,
  0x0E0E0E0E0E000000ULL, 0x1C1C1C1C1C000000ULL, 0x3838383838000000ULL,
  0x7070707070000000ULL, 0xE0E0E0E0E0000000ULL, 0xC0C0C0C0C0000000ULL,
  0x0303030300000000ULL, 0x0707070700000000ULL, 0x0E0E0E0E00000000ULL,
  0x1C1C1C1C00000000ULL, 0x3838383800000000ULL, 0x7070707000000000ULL,
  0xE0E0E0E000000000ULL, 0xC0C0C0C000000000ULL, 0x0303030000000000ULL,
  0x0707070000000000ULL, 0x0E0E0E0000000000ULL, 0x1C1C1C0000000000ULL,
  0x3838380000000000ULL, 0x7070700000000000ULL, 0xE0E0E00000000000ULL,
  0xC0C0C00000000000ULL, 0x0303000000000000ULL, 0x0707000000000000ULL,
  0x0E0E000000000000ULL, 0x1C1C000000000000ULL, 0x3838000000000000ULL,
  0x7070000000000000ULL, 0xE0E0000000000000ULL, 0xC0C0000000000000ULL,
  0x0300000000000000ULL, 0x0700000000000000ULL, 0x0E00000000000000ULL,
  0x1C00000000000000ULL, 0x3800000000000000ULL, 0x7000000000000000ULL,
  0xE000000000000000ULL, 0xC000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL,
};

//----------------------------------------------------------------------------
const uint64_t Bitfoot::_WIDE_SOUTH[64] =
{
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
  0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000003ULL,
  0x0000000000000007ULL, 0x000000000000000EULL, 0x000000000000001CULL,
  0x0000000000000038ULL, 0x0000000000000070ULL, 0x00000000000000E0ULL,
  0x00000000000000C0ULL, 0x0000000000000303ULL, 0x0000000000000707ULL,
  0x0000000000000E0EULL, 0x0000000000001C1CULL, 0x0000000000003838ULL,
  0x0000000000007070ULL, 0x000000000000E0E0ULL, 0x000000000000C0C0ULL,
  0x0000000000030303ULL, 0x0000000000070707ULL, 0x00000000000E0E0EULL,
  0x00000000001C1C1CULL, 0x0000000000383838ULL, 0x0000000000707070ULL,
  0x0000000000E0E0E0ULL, 0x0000000000C0C0C0ULL, 0x0000000003030303ULL,
  0x0000000007070707ULL, 0x000000000E0E0E0EULL, 0x000000001C1C1C1CULL,
  0x0000000038383838ULL, 0x0000000070707070ULL, 0x00000000E0E0E0E0ULL,
  0x00000000C0C0C0C0ULL, 0x0000000303030303ULL, 0x0000000707070707ULL,
  0x0000000E0E0E0E0EULL, 0x0000001C1C1C1C1CULL, 0x0000003838383838ULL,
  0x0000007070707070ULL, 0x000000E0E0E0E0E0ULL, 0x000000C0C0C0C0C0ULL,
  0x0000030303030303ULL, 0x0000070707070707ULL, 0x00000E0E0E0E0E0EULL,
  0x00001C1C1C1C1C1CULL, 0x0000383838383838ULL, 0x0000707070707070ULL,
  0x0000E0E0E0E0E0E0ULL, 0x0000C0C0C0C0C0C0ULL, 0x0003030303030303ULL,
  0x0007070707070707ULL, 0x000E0E0E0E0E0E0EULL, 0x001C1C1C1C1C1C1CULL,
  0x0038383838383838ULL, 0x0070707070707070ULL, 0x00E0E0E0E0E0E0E0ULL,
  0x00C0C0C0C0C0C0C0ULL,
};

//----------------------------------------------------------------------------
bool                Bitfoot::_ext = false;
bool                Bitfoot::_iid = false;
bool                Bitfoot::_initialized = false;
bool                Bitfoot::_nmp = false;
bool                Bitfoot::_oneReply = false;
char                Bitfoot::_hist[0x10000] = {0};
int                 Bitfoot::_board[64] = {0};
int                 Bitfoot::_contempt = 0;
int                 Bitfoot::_delta = 0;
int                 Bitfoot::_depth = 0;
int                 Bitfoot::_drawScore[2] = {0};
int                 Bitfoot::_lmr = 0;
int                 Bitfoot::_movenum = 0;
int                 Bitfoot::_rzr = 0;
int                 Bitfoot::_seldepth = 0;
int                 Bitfoot::_tempo = 0;
int                 Bitfoot::_test = 0;
std::string         Bitfoot::_currmove;
int64_t             Bitfoot::_hashSize = 0;
Bitfoot              Bitfoot::_node[MaxPlies];
std::set<uint64_t>  Bitfoot::_seen;
TranspositionTable  Bitfoot::_tt;
Stats               Bitfoot::_stats;
Stats               Bitfoot::_totalStats;

//----------------------------------------------------------------------------
EngineOption Bitfoot::_optHash("Hash", "1024", EngineOption::Spin, 0, 4096);
EngineOption Bitfoot::_optClearHash("Clear Hash", "", EngineOption::Button);
EngineOption Bitfoot::_optContempt("Contempt", "0", EngineOption::Spin, 0, 50);
EngineOption Bitfoot::_optDelta("Delta Pruning Margin", "500", EngineOption::Spin, 0, 9999);
EngineOption Bitfoot::_optEXT("Check Extensions", _TRUE, EngineOption::Checkbox);
EngineOption Bitfoot::_optIID("Internal Iterative Deepening", _TRUE, EngineOption::Checkbox);
EngineOption Bitfoot::_optLMR("Late Move Reduction", "1", EngineOption::Spin, 0, 3);
EngineOption Bitfoot::_optNMP("Null Move Pruning", _TRUE, EngineOption::Checkbox);
EngineOption Bitfoot::_optOneReply("One Reply Extensions", _TRUE, EngineOption::Checkbox);
EngineOption Bitfoot::_optRZR("Razoring Delta", "500", EngineOption::Spin, 0, 9999);
EngineOption Bitfoot::_optTempo("Tempo Bonus", "0", EngineOption::Spin, 0, 50);
EngineOption Bitfoot::_optTest("Experimental Feature", "0", EngineOption::Spin, 0, 9999);

//----------------------------------------------------------------------------
std::string Bitfoot::GetEngineName() const
{
  return "Bitfoot";
}

//----------------------------------------------------------------------------
std::string Bitfoot::GetEngineVersion() const
{
  std::string rev = MAKE_XSTR(GIT_REV);
  if (rev.size() > 7) {
    rev = rev.substr(0, 7);
  }
  return ("1.0." + rev);
}

//----------------------------------------------------------------------------
std::string Bitfoot::GetAuthorName() const
{
  return "Shawn Chidester";
}

//----------------------------------------------------------------------------
std::string Bitfoot::GetCountryName() const
{
  return "USA";
}

//----------------------------------------------------------------------------
std::list<EngineOption> Bitfoot::GetOptions() const
{
  std::list<EngineOption> opts;
  opts.push_back(_optHash);
  opts.push_back(_optClearHash);
  opts.push_back(_optContempt);
  opts.push_back(_optDelta);
  opts.push_back(_optEXT);
  opts.push_back(_optIID);
  opts.push_back(_optLMR);
  opts.push_back(_optNMP);
  opts.push_back(_optRZR);
  opts.push_back(_optTempo);
  opts.push_back(_optTest);
  return opts;
}

//----------------------------------------------------------------------------
bool Bitfoot::SetEngineOption(const std::string& optionName,
                             const std::string& optionValue)
{
  if (!stricmp(optionName.c_str(), _optHash.GetName().c_str())) {
    if (_optHash.SetValue(optionValue)) {
      SetHashSize(_optHash.GetIntValue());
      return true;
    }
  }
  if (!stricmp(optionName.c_str(), _optClearHash.GetName().c_str())) {
    ClearHash();
    return true;
  }
  if (!stricmp(optionName.c_str(), _optContempt.GetName().c_str())) {
    if (_optContempt.SetValue(optionValue)) {
      _contempt = static_cast<int>(_optContempt.GetIntValue());
      return true;
    }
  }
  if (!stricmp(optionName.c_str(), _optEXT.GetName().c_str())) {
    if (_optEXT.SetValue(optionValue)) {
      _ext = (_optEXT.GetValue() == _TRUE);
      return true;
    }
  }
  if (!stricmp(optionName.c_str(), _optDelta.GetName().c_str())) {
    if (_optDelta.SetValue(optionValue)) {
      _delta = static_cast<int>(_optDelta.GetIntValue());
      return true;
    }
  }
  if (!stricmp(optionName.c_str(), _optIID.GetName().c_str())) {
    if (_optIID.SetValue(optionValue)) {
      _iid = (_optIID.GetValue() == _TRUE);
      return true;
    }
  }
  if (!stricmp(optionName.c_str(), _optLMR.GetName().c_str())) {
    if (_optLMR.SetValue(optionValue)) {
      _lmr = static_cast<int>(_optLMR.GetIntValue());
      return true;
    }
  }
  if (!stricmp(optionName .c_str(), _optNMP.GetName().c_str())) {
    if (_optNMP.SetValue(optionValue)) {
      _nmp = (_optNMP.GetValue() == _TRUE);
      return true;
    }
  }
  if (!stricmp(optionName .c_str(), _optOneReply.GetName().c_str())) {
    if (_optOneReply.SetValue(optionValue)) {
      _oneReply = (_optOneReply.GetValue() == _TRUE);
      return true;
    }
  }
  if (!stricmp(optionName.c_str(), _optRZR.GetName().c_str())) {
    if (_optRZR.SetValue(optionValue)) {
      _rzr = static_cast<int>(_optRZR.GetIntValue());
      return true;
    }
  }
  if (!stricmp(optionName.c_str(), _optTempo.GetName().c_str())) {
    if (_optTempo.SetValue(optionValue)) {
      _tempo = static_cast<int>(_optTempo.GetIntValue());
      return true;
    }
  }
  if (!stricmp(optionName.c_str(), _optTest.GetName().c_str())) {
    if (_optTest.SetValue(optionValue)) {
      _test = static_cast<int>(_optTest.GetIntValue());
      return true;
    }
  }
  return false;
}

//----------------------------------------------------------------------------
void Bitfoot::Initialize()
{
  ply = 0;
  child = _node;
  parent = NULL;
  for (int i = 0; i < MaxPlies; ++i) {
    _node[i].ply = (i + 1);
    _node[i].child = ((i + 1) < MaxPlies) ? &(_node[i + 1]) : NULL;
    _node[i].parent = (i > 0) ? &(_node[i - 1]) : this;
  }

  _hashSize = _optHash.GetIntValue();
  _contempt = static_cast<int>(_optContempt.GetIntValue());
  _delta    = static_cast<int>(_optDelta.GetIntValue());
  _lmr      = static_cast<int>(_optLMR.GetIntValue());
  _rzr      = static_cast<int>(_optRZR.GetIntValue());
  _tempo    = static_cast<int>(_optTempo.GetIntValue());
  _test     = static_cast<int>(_optTest.GetIntValue());
  _ext      = (_optEXT.GetValue() == _TRUE);
  _iid      = (_optIID.GetValue() == _TRUE);
  _nmp      = (_optNMP.GetValue() == _TRUE);
  _oneReply = (_optOneReply.GetValue() == _TRUE);

  ClearHistory();
  SetHashSize(_hashSize);
  SetPosition(_STARTPOS);

  _initialized = true;
}

//----------------------------------------------------------------------------
bool Bitfoot::IsInitialized() const
{
  return _initialized;
}

//----------------------------------------------------------------------------
const char* Bitfoot::SetPosition(const char* fen)
{
  if (!fen || !*fen) {
    Output() << "NULL or empty fen string";
    return NULL;
  }

  uint64_t pieces[PieceTypeCount];
  int tmpBoard[64];
  int kingPosition[2] = { -1, -1 };
  int materialTotal[2] = { 0, 0 };
  int squareTotal[2] = { 0, 0 };
  int moveCount = 0;
  int reversibleCount = 0;
  int boardState = 0;
  int epSquare = NoSquare;
  uint64_t pcKey = 0;

  memset(pieces, 0, sizeof(pieces));
  memset(tmpBoard, 0, sizeof(tmpBoard));

  const char* p = fen;
  for (int y = 7; y >= 0; --y, ++p) {
    for (int x = 0; x < 8; ++x, ++p) {
      const int sqr = SQR(x,y);
      switch (*p) {
      case '1': case '2': case '3': case '4':
      case '5': case '6': case '7': case '8':
        x += (*p - '1');
        break;
      case 'B':
        pieces[White] |= BIT(sqr);
        pieces[WhiteBishop] |= BIT(sqr);
        tmpBoard[sqr] = WhiteBishop;
        materialTotal[White] += BishopValue;
        squareTotal[White] += SquareValue(WhiteBishop, sqr);
        pcKey ^= _HASH[White|Bishop][sqr];
        break;
      case 'K':
        pieces[White] |= BIT(sqr);
        pieces[WhiteKing] |= BIT(sqr);
        tmpBoard[sqr] = WhiteKing;
        kingPosition[White] = sqr;
        pcKey ^= _HASH[White|King][sqr];
        break;
      case 'N':
        pieces[White] |= BIT(sqr);
        pieces[WhiteKnight] |= BIT(sqr);
        tmpBoard[sqr] = WhiteKnight;
        materialTotal[White] += KnightValue;
        squareTotal[White] += SquareValue(WhiteKnight, sqr);
        pcKey ^= _HASH[White|Knight][sqr];
        break;
      case 'P':
        pieces[White] |= BIT(sqr);
        pieces[WhitePawn] |= BIT(sqr);
        tmpBoard[sqr] = WhitePawn;
        materialTotal[White] += PawnValue;
        squareTotal[White] += SquareValue(WhitePawn, sqr);
        pcKey ^= _HASH[White|Pawn][sqr];
        break;
      case 'Q':
        pieces[White] |= BIT(sqr);
        pieces[WhiteQueen] |= BIT(sqr);
        tmpBoard[sqr] = WhiteQueen;
        materialTotal[White] += QueenValue;
        squareTotal[White] += SquareValue(WhiteQueen, sqr);
        pcKey ^= _HASH[White|Queen][sqr];
        break;
      case 'R':
        pieces[White] |= BIT(sqr);
        pieces[WhiteRook] |= BIT(sqr);
        tmpBoard[sqr] = WhiteRook;
        materialTotal[White] += RookValue;
        squareTotal[White] += SquareValue(WhiteRook, sqr);
        pcKey ^= _HASH[White|Rook][sqr];
        break;
      case 'b':
        pieces[Black] |= BIT(sqr);
        pieces[BlackBishop] |= BIT(sqr);
        tmpBoard[sqr] = BlackBishop;
        materialTotal[Black] += BishopValue;
        squareTotal[Black] += SquareValue(BlackBishop, sqr);
        pcKey ^= _HASH[Black|Bishop][sqr];
        break;
      case 'k':
        pieces[Black] |= BIT(sqr);
        pieces[BlackKing] |= BIT(sqr);
        tmpBoard[sqr] = BlackKing;
        kingPosition[Black] = sqr;
        pcKey ^= _HASH[Black|King][sqr];
        break;
      case 'n':
        pieces[Black] |= BIT(sqr);
        pieces[BlackKnight] |= BIT(sqr);
        tmpBoard[sqr] = BlackKnight;
        materialTotal[Black] += KnightValue;
        squareTotal[Black] += SquareValue(BlackKnight, sqr);
        pcKey ^= _HASH[Black|Knight][sqr];
        break;
      case 'p':
        pieces[Black] |= BIT(sqr);
        pieces[BlackPawn] |= BIT(sqr);
        tmpBoard[sqr] = BlackPawn;
        materialTotal[Black] += PawnValue;
        squareTotal[Black] += SquareValue(BlackPawn, sqr);
        pcKey ^= _HASH[Black|Pawn][sqr];
        break;
      case 'q':
        pieces[Black] |= BIT(sqr);
        pieces[BlackQueen] |= BIT(sqr);
        tmpBoard[sqr] = BlackQueen;
        materialTotal[Black] += QueenValue;
        squareTotal[Black] += SquareValue(BlackQueen, sqr);
        pcKey ^= _HASH[Black|Queen][sqr];
        break;
      case 'r':
        pieces[Black] |= BIT(sqr);
        pieces[BlackRook] |= BIT(sqr);
        tmpBoard[sqr] = BlackRook;
        materialTotal[Black] += RookValue;
        squareTotal[Black] += SquareValue(BlackRook, sqr);
        pcKey ^= _HASH[Black|Rook][sqr];
        break;
      default:
        Output() << "Invalid character at " << p;
        return NULL;
      }
    }
    if ((y > 0) && (*p != '/')) {
      Output() << "Invalid character at " << p;
      return NULL;
    }
  }

  if (!SINGLE_BIT(pieces[WhiteKing]) || !SINGLE_BIT(pieces[BlackKing])) {
    Output() << "Wrong number of kings in " << fen;
    return NULL;
  }

  NextWord(p);
  switch (*p++) {
  case 'b': boardState |= Black; break;
  case 'w': boardState |= White; break;
  default:
    Output() << "Expected 'w' or 'b' at " << p;
    return NULL;
  }
  if (!*p || !isspace(*p++)) {
    Output() << "Invalid character at " << p;
    return NULL;
  }

  NextWord(p);
  while (*p && !isspace(*p)) {
    switch (*p++) {
    case '-': break;
    case 'K': boardState |= WhiteShort; continue;
    case 'Q': boardState |= WhiteLong;  continue;
    case 'k': boardState |= BlackShort; continue;
    case 'q': boardState |= BlackLong;  continue;
    default:
      Output() << "Unexpected castle rights at " << p;
      return NULL;
    }
    break;
  }
  if (!*p || !isspace(*p++)) {
    Output() << "Invalid character at " << p;
    return NULL;
  }

  NextWord(p);
  if (IS_X(p[0]) && IS_Y(p[1])) {
    const int x = TO_X(*p++);
    const int y = TO_Y(*p++);
    epSquare = SQR(x,y);
    if (y != ((boardState & Black) ? 2 : 5)) {
      Output() << "Invalid en passant square: " << SqrStr(epSquare);
      return NULL;
    }
  }
  else if (*p == '-') {
    p++;
  }
  if (!*p || !isspace(*p)) {
    Output() << "Invalid character at " << p;
    return NULL;
  }

  NextWord(p);
  if (isdigit(*p)) {
    while (*p && isdigit(*p)) {
      reversibleCount = ((reversibleCount * 10) + (*p++ - '0'));
    }
  }
  else if (*p == '-') {
    p++;
  }

  NextWord(p);
  if (isdigit(*p)) {
    while (*p && isdigit(*p)) {
      moveCount = ((moveCount * 10) + (*p++ - '0'));
    }
  }

  _seen.clear();
  memcpy(pc, pieces, sizeof(pc));
  memcpy(_board, tmpBoard, sizeof(_board));
  memcpy(king, kingPosition, sizeof(king));
  memcpy(material, materialTotal, sizeof(material));
  memcpy(sqrVal, squareTotal, sizeof(sqrVal));
  memset(pinfo, 0, sizeof(pinfo));
  memset(slider, 0, sizeof(slider));

  lastMove.Clear();
  lastPieceMoved = 0;
  capture        = 0;
  mcount         = ((moveCount * 2) + (state & Black));
  effected       = _ALL;
  state          = boardState;
  ep             = epSquare;
  rcount         = reversibleCount;
  pieceKey       = pcKey;
  positionKey    = (pcKey ^ _HASH[0][state & StateMask] ^ _HASH[1][ep]);
  kcross[White]  = RookXO(king[White]);
  kcross[Black]  = RookXO(king[Black]);
  kdiags[White]  = BishopXO(king[White]);
  kdiags[Black]  = BishopXO(king[Black]);
  chkrs          = ColorToMove() ? FindPiecesGivingCheck<Black>()
                                 : FindPiecesGivingCheck<White>();

  ResetMovegen(0ULL);

  // update misc state flags
  if (chkrs) {
    state |= Check;
  }

  if (ColorToMove()
      ? AttackedBy<Black>(king[White])
      : AttackedBy<White>(king[Black]))
  {
    Output() << "Side to move can take enemy king!";
    return NULL;
  }

  Evaluate();

  return p;
}

//----------------------------------------------------------------------------
const char* Bitfoot::MakeMove(const char* str)
{
  if (!str ||
      !IS_X(str[0]) || !IS_Y(str[1]) ||
      !IS_X(str[2]) || !IS_Y(str[3]))
  {
    return NULL;
  }

  int from  = SQR(TO_X(str[0]), TO_Y(str[1]));
  int to    = SQR(TO_X(str[2]), TO_Y(str[3]));
  int pc    = _board[from];
  int cap   = _board[to];
  int promo = 0;

  const char* p = (str + 4);
  switch (*p) {
  case 'b': promo = (ColorToMove()|Bishop); p++; break;
  case 'n': promo = (ColorToMove()|Knight); p++; break;
  case 'q': promo = (ColorToMove()|Queen);  p++; break;
  case 'r': promo = (ColorToMove()|Rook);   p++; break;
  default:
    break;
  }

  if ((*p && !isspace(*p)) ||
      !pc ||
      (from == to) ||
      (COLOR_OF(pc) != ColorToMove()) ||
      (cap && (COLOR_OF(cap) == ColorToMove())) ||
      ((Black|cap) == BlackKing) ||
      ((Black|promo) == BlackPawn) ||
      ((Black|promo) == BlackKing) ||
      (promo && ((Black|pc) != BlackPawn)))
  {
    return NULL;
  }

  if (WhiteToMove()) {
    GenerateMoves<White>();
  }
  else {
    GenerateMoves<Black>();
  }

  for (; moveIndex < moveCount; ++moveIndex) {
    const Move& move = moves[moveIndex];
    if ((move.GetFrom() == from) &&
        (move.GetTo() == to) &&
        (move.GetPromo() == promo))
    {
      break;
    }
  }
  if (moveIndex >= moveCount) {
    return NULL;
  }

  if (WhiteToMove()) {
    Exec<White>(moves[moveIndex], *this);
  }
  else {
    Exec<Black>(moves[moveIndex], *this);
  }

  return p;
}

//----------------------------------------------------------------------------
std::string Bitfoot::GetFEN() const
{
  char fen[256];
  char* p = fen;
  int empty = 0;
  int type;

  // piece positions
  for (int y = 7; y >= 0; --y) {
    for (int x = 0; x < 8; ++x) {
      if ((type = _board[SQR(x,y)]) && empty) {
        *p++ = ('0' + empty);
        empty = 0;
      }
      switch (type) {
      case WhitePawn:   *p++ = 'P'; break;
      case WhiteKnight: *p++ = 'N'; break;
      case WhiteBishop: *p++ = 'B'; break;
      case WhiteRook:   *p++ = 'R'; break;
      case WhiteQueen:  *p++ = 'Q'; break;
      case WhiteKing:   *p++ = 'K'; break;
      case BlackPawn:   *p++ = 'p'; break;
      case BlackKnight: *p++ = 'n'; break;
      case BlackBishop: *p++ = 'b'; break;
      case BlackRook:   *p++ = 'r'; break;
      case BlackQueen:  *p++ = 'q'; break;
      case BlackKing:   *p++ = 'k'; break;
      default:
        empty++;
      }
    }
    if (empty) {
      *p++ = ('0' + empty);
      empty = 0;
    }
    if (y > 0) {
      *p++ = '/';
    }
  }

  // color to move
  *p++ = ' ';
  *p++ = (WhiteToMove() ? 'w' : 'b');

  // castling
  *p++ = ' ';
  if (state & CastleMask) {
    if (state & WhiteShort) *p++ = 'K';
    if (state & WhiteLong)  *p++ = 'Q';
    if (state & BlackShort) *p++ = 'k';
    if (state & BlackLong)  *p++ = 'q';
  }
  else {
    *p++ = '-';
  }

  // en passant square
  *p++ = ' ';
  if (IS_SQUARE(ep)) {
    *p++ = ('a' + XC(ep));
    *p++ = ('1' + YC(ep));
  }
  else {
    *p++ = '-';
  }

  // reversible half-move count and full move count
  snprintf(p, (sizeof(fen) - strlen(fen)), " %d %d",
           rcount, ((mcount + 1) / 2));
  return fen;
}

//----------------------------------------------------------------------------
void Bitfoot::PrintBitmap(const uint64_t map)
{
  Output out;
  out << '\n';
  for (int y = 7; y >= 0; --y) {
    for (int x = 0; x < 8; ++x) {
      if (map & BIT(SQR(x,y))) {
        out << " X";
      }
      else {
        out << " O";
      }
    }
    out << '\n';
  }
  out << '\n';
}

//----------------------------------------------------------------------------
void Bitfoot::PrintBoard() const
{
  Output out;
  out << '\n';

  for (int y = 7; y >= 0; --y) {
    for (int x = 0; x < 8; ++x) {
      switch (_board[SQR(x, y)]) {
      case WhitePawn:   out << " P"; break;
      case WhiteKnight: out << " N"; break;
      case WhiteBishop: out << " B"; break;
      case WhiteRook:   out << " R"; break;
      case WhiteQueen:  out << " Q"; break;
      case WhiteKing:   out << " K"; break;
      case BlackPawn:   out << " p"; break;
      case BlackKnight: out << " n"; break;
      case BlackBishop: out << " b"; break;
      case BlackRook:   out << " r"; break;
      case BlackQueen:  out << " q"; break;
      case BlackKing:   out << " k"; break;
      default:
        out << (((x ^ y) & 1) ? " -" : "  ");
      }
    }
    switch (y) {
    case 7:
      out << (WhiteToMove() ? "  White to move" : "  Black to move");
      break;

    case 6:
      if (state & Draw) {
        out << "  DRAW";
      }
      break;

    case 5:
      out << "  Move Number       : " << ((mcount + 1) / 2);
      break;

    case 4:
      out << "  Reversible Moves  : " << rcount;
      break;

    case 3:
      out << "  Castling Rights   : ";
      if (state & WhiteShort) out << 'K';
      if (state & WhiteLong)  out << 'Q';
      if (state & BlackShort) out << 'k';
      if (state & BlackLong)  out << 'q';
      break;

    case 2:
      out << "  En Passant Square : ";
      if (ep != NoSquare) {
        out << SqrStr(ep);
      }
      break;

    case 0:
      out << "  Static Evaluation : " << (ColorToMove() ? -standPat : standPat);
      break;
    }
    out << '\n';
  }

#ifndef NDEBUG
  if (_debug) {
    out << "\nMaterial: " << material[White]       << ", " << material[Black]
        << "\nSqrVal:   " << sqrVal[White]         << ", " << sqrVal[Black]
        << "\nPins:     " << evals.pc[White]       << ". " << evals.pc[Black]
        << "\nPawns:    " << pinfo[White].score    << ", " << pinfo[Black].score
        << "\nPassers:  " << evals.pc[WhitePawn]   << ", " << evals.pc[BlackPawn]
        << "\nKnights:  " << evals.pc[WhiteKnight] << ", " << evals.pc[BlackKnight]
        << "\nBishops:  " << evals.pc[WhiteBishop] << ", " << evals.pc[BlackBishop]
        << "\nRooks:    " << evals.pc[WhiteRook]   << ", " << evals.pc[BlackRook]
        << "\nQueens:   " << evals.pc[WhiteQueen]  << ", " << evals.pc[BlackQueen]
        << "\nKings:    " << evals.pc[WhiteKing]   << ", " << evals.pc[BlackKing]
        << "\nLoose:    " << evals.loose[White]    << ", " << evals.loose[Black]
        << "\nCoverage: " << evals.coverage[White] << ", " << evals.coverage[Black]
        << "\nSpace:    " << evals.space[White]    << ", " << evals.space[Black];
  }
#endif

  out << '\n';
}

//----------------------------------------------------------------------------
bool Bitfoot::WhiteToMove() const
{
  return !(state & Black);
}

//----------------------------------------------------------------------------
void Bitfoot::ClearSearchData()
{
  ClearHash();
  ClearHistory();
  ClearKillers();
}

//----------------------------------------------------------------------------
void Bitfoot::PonderHit()
{
  // ponder not supported
}

//----------------------------------------------------------------------------
void Bitfoot::Quit()
{
  ChessEngine::Quit();
  SetHashSize(0);
}

//----------------------------------------------------------------------------
void Bitfoot::ResetStatsTotals() {
  _totalStats.Clear();
}

//----------------------------------------------------------------------------
void Bitfoot::ShowStatsTotals() const {
  Output() << "--- Averaged Stats";
  _totalStats.Average().Print();
}

//----------------------------------------------------------------------------
void Bitfoot::GetStats(int* depth,
                      int* seldepth,
                      uint64_t* nodes,
                      uint64_t* qnodes,
                      uint64_t* msecs,
                      int* movenum,
                      char* move,
                      const size_t movelen) const
{
  if (depth) {
    *depth = _depth;
  }
  if (seldepth) {
    *seldepth = _seldepth;
  }
  if (nodes) {
    *nodes = (_stats.snodes + _stats.qnodes);
  }
  if (qnodes) {
    *qnodes = _stats.qnodes;
  }
  if (msecs) {
    *msecs = (Now() - _startTime);
  }
  if (movenum) {
    *movenum = _movenum;
  }
  if (move && movelen) {
    snprintf(move, movelen, "%s", _currmove.c_str());
  }
}

//----------------------------------------------------------------------------
uint64_t Bitfoot::MyPerft(const int depth)
{
  if (!_initialized) {
    Output() << "Engine not initialized";
    return 0;
  }

  InitSearch();

  const int d = std::min<int>(depth, MaxPlies);
  const uint64_t count = WhiteToMove() ? PerftSearchRoot<White>(d)
                                       : PerftSearchRoot<Black>(d);

  const uint64_t msecs = (Now() - _startTime);
  Output() << "Perft " << count << ' ' << Rate((count / 1000), msecs)
           << " KLeafs/sec";

  return count;
}

//----------------------------------------------------------------------------
std::string Bitfoot::MyGo(const int depth,
                         const int /*movestogo*/,
                         const uint64_t /*movetime*/,
                         const uint64_t /*wtime*/, const uint64_t /*winc*/,
                         const uint64_t /*btime*/, const uint64_t /*binc*/,
                         std::string* /*ponder*/)
{
  if (!_initialized) {
    Output() << "Engine not initialized";
    return std::string();
  }

  InitSearch();

  int d = std::min<int>(depth, MaxPlies);
  if (d <= 0) {
    d = MaxPlies;
  }
  std::string bestmove = (WhiteToMove() ? SearchRoot<White>(d)
                                        : SearchRoot<Black>(d));

  _totalStats += _stats;
  if (_debug) {
    Output() << "--- Stats";
    Output() << _tt.GetStores() << " stores, " << _tt.GetHits() << " hits, "
             << _tt.GetCheckmates() << " checkmates, "
             << _tt.GetStalemates() << " stalemates";

    _stats.Print();
  }

  return bestmove;
}

} // namespace bitfoot
